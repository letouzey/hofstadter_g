Require Import MoreFun MoreList DeltaList GenFib GenG.
Import ListNotations.

(** * Morphic words

    Some theory of infinite words generated by substitutions.
    Hofstadter functions [f k] can be described by such infinite
    words, or more precisely their derivative
    (fun n => f k (S n) - f k n)
*)

(** letters : here some natural numbers *)

Definition letter := nat.

(** Finite word : list of letters *)

Definition word := list letter.

(** Sequence a.k.a Infinite word : function from nat to letter *)

Definition sequence := nat -> letter.

Definition PrefixSeq (u:word) (f:sequence) := u = take (length u) f.

(** Substitution : function form letter to words *)

Definition subst := letter -> word.

Fixpoint apply (s:subst) w :=
  match w with
  | [] => []
  | a::w => s a ++ apply s w
  end.

Fixpoint napply (s:subst) n w :=
  match n with
  | 0 => w
  | S n => napply s n (apply s w)
  end.

Lemma napply_1 s u : napply s 1 u = apply s u.
Proof.
 reflexivity.
Qed.

Lemma apply_app s u v : apply s (u++v) = apply s u ++ apply s v.
Proof.
 induction u; simpl; auto.
 now rewrite IHu, app_assoc.
Qed.

Lemma apply_alt s w : apply s w = concat (map s w).
Proof.
 induction w; simpl; auto. now f_equal.
Qed.

Lemma napply_nil s n : napply s n [] = [].
Proof.
 induction n; simpl; auto.
Qed.

Lemma napply_app s n u v : napply s n (u++v) = napply s n u ++ napply s n v.
Proof.
 revert u v. induction n; intros; simpl; auto.
 now rewrite apply_app, IHn.
Qed.

Lemma napply_cons s n a u : napply s n (a::u) = napply s n [a] ++ napply s n u.
Proof.
 apply (napply_app s n [a] u).
Qed.

Lemma napply_alt s n u : napply s (S n) u = apply s (napply s n u).
Proof.
 revert u.
 induction n; intros; simpl; auto.
 now rewrite <- IHn.
Qed.

Lemma napply_add s n m u : napply s (n+m) u = napply s n (napply s m u).
Proof.
 induction n.
 - simpl; auto.
 - now rewrite Nat.add_succ_l, !napply_alt, IHn.
Qed.

Lemma napply_concat s n w :
  napply s n w = concat (map (fun a => napply s n [a]) w).
Proof.
 induction w; simpl; auto using napply_nil.
 rewrite napply_cons. now f_equal.
Qed.

Definition NoErase (s:subst) := forall a, s a <> [].

Definition Prolong (s:subst) a := exists u, u<>[] /\ s a = a::u.

Lemma noerase_nonnil_apply s u : NoErase s -> u<>[] -> apply s u <> [].
Proof.
 intros NE. destruct u as [|a u]. easy. intros _. simpl.
 specialize (NE a). destruct (s a) as [|b v]; easy.
Qed.

Lemma noerase_nonnil_napply s u n : NoErase s -> u<>[] -> napply s n u <> [].
Proof.
 intros NE. revert u. induction n; simpl; intros; auto.
 apply IHn. apply noerase_nonnil_apply; auto.
Qed.

Lemma noerase_prolong_napply_len s a :
  NoErase s -> Prolong s a -> forall n, n < length (napply s n [a]).
Proof.
 intros NE (u & Hu & PR).
 induction n. simpl; auto.
 simpl. rewrite app_nil_r, PR, napply_cons, app_length.
 assert (length (napply s n u) <> 0).
 { rewrite length_zero_iff_nil. now apply noerase_nonnil_napply. }
 lia.
Qed.

Lemma napply_prefix_S s a n :
 Prolong s a -> Prefix (napply s n [a]) (napply s (S n) [a]).
Proof.
 intros (u & Hu & PR).
 simpl. rewrite app_nil_r, PR. rewrite (napply_cons _ _ _ u).
 now exists (napply s n u).
Qed.

Lemma napply_prefix_mono s a n m : Prolong s a -> n <= m ->
 Prefix (napply s n [a]) (napply s m [a]).
Proof.
 intros PR.
 induction 1.
 - exists []. apply app_nil_r.
 - destruct IHle as (w & E).
   destruct (napply_prefix_S s a m) as (w' & E'); auto.
   exists (w++w'). now rewrite app_assoc, E, E'.
Qed.

Lemma apply_grow s w : NoErase s -> length w <= length (apply s w).
Proof.
 intros NE.
 induction w; simpl; auto.
 rewrite app_length. specialize (NE a). destruct (s a); simpl; lia || easy.
Qed.

Lemma napply_mono s n m w :
 NoErase s -> n <= m -> length (napply s n w) <= length (napply s m w).
Proof.
 induction 2; auto.
 rewrite IHle. clear IHle H0. rewrite napply_alt. now apply apply_grow.
Qed.

(** Any nonerasing prolongeable substitution leads to a unique infinite
    sequence *)

Definition SubstSeq (s:subst) (f:sequence) a :=
  forall n, PrefixSeq (napply s n [a]) f.

Definition subst2seq s a :=
 fun n => nth n (napply s n [a]) a.

Lemma subst2seq_indep s a b n : NoErase s -> Prolong s a ->
  forall m, n <= m -> subst2seq s a n = nth n (napply s m [a]) b.
Proof.
 intros. rewrite nth_indep with (d':=a).
 2:{ apply Nat.le_lt_trans with m; trivial.
     apply noerase_prolong_napply_len; trivial. }
 apply Prefix_nth. apply napply_prefix_mono; auto.
 apply noerase_prolong_napply_len; auto.
Qed.

Lemma substseq_exists s a :
  NoErase s -> Prolong s a -> SubstSeq s (subst2seq s a) a.
Proof.
 intros NE PR n.
 red. symmetry. apply take_carac; auto.
 intros m b Hm.
 unfold subst2seq.
 rewrite (nth_indep _ b a); auto.
 destruct (Nat.le_gt_cases n m).
 - apply Prefix_nth; auto.
   apply napply_prefix_mono; auto.
 - symmetry.
   apply Prefix_nth; auto.
   apply napply_prefix_mono; auto with arith.
   apply noerase_prolong_napply_len; auto.
Qed.

Lemma substseq_unique s a f f' :
  NoErase s -> Prolong s a -> SubstSeq s f a -> SubstSeq s f' a ->
  (forall n, f n = f' n).
Proof.
 intros NE PR Hf Hf' n.
 specialize (Hf (S n)).
 specialize (Hf' (S n)). unfold PrefixSeq in *.
 set (u := napply s (S n) [a]) in *.
 rewrite <- (take_nth f (length u) n a).
 2:{ transitivity (S n); auto. apply noerase_prolong_napply_len; auto. }
 rewrite <- (take_nth f' (length u) n a); auto.
 2:{ transitivity (S n); auto. apply noerase_prolong_napply_len; auto. }
 now rewrite <- Hf, <- Hf'.
Qed.

(** Specific susbstitution for Hofstadter functions.
    Works on letters 0..k *)

Definition ksubst k n := if n =? k then [k; 0] else [S n].

Definition kword k n := napply (ksubst k) n [k].

Definition kseq k := subst2seq (ksubst k) k.

(* Compute map (kseq 2) (List.seq 0 20). *)
(* [2; 0; 1; 2; 2; 0; 2; 0; 1; 2; 0; 1; 2; 2; 0; 1; 2; 2; 0; 2] *)

Lemma ksubst_noerase k : NoErase (ksubst k).
Proof.
 red. intros c. unfold ksubst. now case Nat.eqb_spec.
Qed.

Lemma ksubst_prolong k : Prolong (ksubst k) k.
Proof.
 red. exists [0]. split. easy.
 unfold ksubst. now rewrite Nat.eqb_refl.
Qed.

Lemma kseq_SubstSeq k : SubstSeq (ksubst k) (kseq k) k.
Proof.
 apply substseq_exists. apply ksubst_noerase. apply ksubst_prolong.
Qed.

Lemma kword_S k n : kword k (S n) = apply (ksubst k) (kword k n).
Proof.
 apply napply_alt.
Qed.

Lemma kseq_k_0 k : kseq k 0 = k.
Proof.
 reflexivity.
Qed.

(** kword letters are always in 0..k *)

Lemma ksubst_letters k w :
 Forall (fun a => a <= k) w ->
 Forall (fun a => a <= k) (apply (ksubst k) w).
Proof.
 induction w; simpl; auto.
 intros H; inversion_clear H. apply Forall_app. split; auto.
 unfold ksubst.
 case Nat.eqb_spec; intro; repeat (constructor; try lia).
Qed.

Lemma napply_ksubst_letters k n w :
 Forall (fun a => a <= k) w ->
 Forall (fun a => a <= k) (napply (ksubst k) n w).
Proof.
 induction n.
 - simpl. trivial.
 - rewrite napply_alt. intros. now apply ksubst_letters, IHn.
Qed.

Lemma kword_letters k n : Forall (fun a => a <= k) (kword k n).
Proof.
 apply napply_ksubst_letters. now constructor.
Qed.

Lemma kseq_letters k n : kseq k n <= k.
Proof.
 unfold kseq, subst2seq.
 set (l := napply _ _ _).
 assert (Forall (fun a => a <= k) l).
 { apply napply_ksubst_letters. now constructor. }
 clearbody l. revert n. induction H; simpl; now destruct n.
Qed.

(** Initial values *)

Lemma kword_0 k : kword k 0 = [k].
Proof.
 reflexivity.
Qed.

Lemma kword_1 k : kword k 1 = [k;0].
Proof.
 cbn. unfold ksubst. now rewrite Nat.eqb_refl.
Qed.

Lemma ksubst_low0 k n : n <= k -> napply (ksubst k) n [0] = [n].
Proof.
 induction n. auto.
 intros LE.
 rewrite napply_alt. rewrite IHn; try lia. simpl.
 unfold ksubst. case Nat.eqb_spec. lia. intros _. apply app_nil_r.
Qed.

Lemma kword_low k n : n <= S k -> kword k n = k :: List.seq 0 n.
Proof.
 induction n.
 - now rewrite kword_0.
 - intros LE.
   rewrite seq_S.
   cbn. unfold ksubst at 2. rewrite Nat.eqb_refl. simpl.
   rewrite napply_cons.
   rewrite ksubst_low0; auto; try lia.
   change (kword k n ++ [n] = k  :: List.seq 0 n ++ [n]).
   rewrite IHn; try lia. auto.
Qed.

(** Alt equation : *)

Lemma kword_alt k n : k<=n -> kword k (S n) = kword k n ++ kword k (n-k).
Proof.
 induction n.
 - intros. replace k with 0 by lia. simpl; auto.
 - intros LE. apply Nat.lt_eq_cases in LE. destruct LE as [LT|EQ].
   + replace (S n -k) with (S (n-k)) by lia.
     remember (S n) as m eqn:E.
     cbn.
     rewrite app_nil_r.
     unfold ksubst at 2. rewrite Nat.eqb_refl.
     rewrite napply_cons. f_equal.
     replace m with (m-k+k) by lia.
     rewrite napply_add. rewrite ksubst_low0 by lia. simpl.
     replace (m-k) with (S (n-k)) by lia.
     simpl. now rewrite app_nil_r.
   + rewrite <- EQ. replace (k-k) with 0 by lia.
     rewrite kword_0. cbn.
     unfold ksubst at 2. rewrite Nat.eqb_refl, app_nil_r.
     rewrite napply_cons. f_equal. apply ksubst_low0. lia.
Qed.

Lemma kword_len k n : length (kword k n) = A k n.
Proof.
 induction n as [[|n] IH] using lt_wf_ind.
 - now rewrite kword_0.
 - case (Nat.le_gt_cases k n) as [LE|GT].
   + rewrite kword_alt; auto. rewrite app_length, !IH; try lia.
     simpl; auto.
   + rewrite kword_low by auto. simpl.
     rewrite seq_length. rewrite !A_base; lia.
Qed.

Lemma kseq_alt k n m a : n < A k m -> kseq k n = nth n (kword k m) a.
Proof.
 intros LE.
 rewrite (kseq_SubstSeq k m).
 change (napply _ _ _) with (kword k m).
 rewrite kword_len, take_nth; auto.
Qed.

Lemma kseq_take_A k n : take (A k n) (kseq k) = kword k n.
Proof.
 apply take_carac.
 - apply kword_len.
 - intros. symmetry. now apply kseq_alt.
Qed.

(** Link between [kseq] and Zeckendorf decomposition :
    0 iff rank 0,
    1 iff rank 1,
    ...
    k iff rank >= k (or no rank, ie n=0)

    Hence 0 in [kseq] whenever the [f k] function is flat.
*)

Definition omin (oa:option nat) (b:nat) :=
  match oa with
  | None => b
  | Some a => Nat.min a b
  end.

Definition bounded_rank k n := omin (rank k n) k.

Lemma kseq_bounded_rank k n : kseq k n = bounded_rank k n.
Proof.
 induction n as [n IH] using lt_wf_ind.
 assert (E := decomp_sum k n).
 assert (D := decomp_delta k n).
 set (l := decomp k n) in *.
 destruct (rev l) as [|a rl] eqn:E'; apply rev_switch in E'.
 - rewrite E' in *. simpl in E. rewrite <- E. easy.
 - assert (A k a <= n < A k (S a)).
   { rewrite <- E, E', sumA_rev.
     split.
     + simpl; lia.
     + apply decomp_max. apply Delta_rev. now rewrite <- E'. }
   rewrite (kseq_alt k n (S a) 0) by lia.
   destruct (Nat.lt_ge_cases a k) as [LT|LE].
   + rewrite kword_low by lia.
     destruct n as [|n]; try easy.
     change (nth _ _ _) with (nth n (List.seq 0 (S a)) 0).
     rewrite !A_base in H; try lia.
     replace n with a by lia.
     rewrite seq_nth by lia. simpl.
     unfold bounded_rank, rank. rewrite decomp_low; simpl; lia.
   + rewrite kword_alt by auto.
     rewrite app_nth2; rewrite kword_len; try lia.
     rewrite <- kseq_alt by (simpl in H; lia).
     rewrite IH by (generalize (@A_nz k a); lia).
     unfold bounded_rank, rank. fold l; rewrite E'; simpl rev.
     replace (decomp _ _) with (rev rl).
     2:{ symmetry; apply decomp_carac.
         - rewrite E' in D. simpl in D. now apply Delta_app_iff in D.
         - revert E. rewrite E'. simpl. rewrite sumA_app. simpl. lia. }
     destruct (rev rl); simpl; lia.
Qed.

(** Another possible susbstitution for Hofstadter functions,
    giving [min (rank n) (S k)] instead of [min (rank n) k].
    Hence it works on 0..(S k) instead of 0..k *)

Definition ksubstbis k n := if n <? k then [S n] else [S k; 0].

Definition kwordbis k n := napply (ksubstbis k) n [S k].

Definition kseqbis k := subst2seq (ksubstbis k) (S k).

(* Compute map (kseqbis 2) (List.seq 0 20). *)
(* [3; 0; 1; 2; 3; 0; 3; 0; 1; 3; 0; 1; 2; 3; 0; 1; 2; 3; 0; 3] *)

Lemma ksubstbis_noerase k : NoErase (ksubstbis k).
Proof.
 red. intros c. unfold ksubstbis. now case Nat.ltb_spec.
Qed.

Lemma ksubstbis_prolong k : Prolong (ksubstbis k) (S k).
Proof.
 red. exists [0]. split. easy.
 unfold ksubstbis. case Nat.ltb_spec; auto; lia.
Qed.

Lemma kseqbis_SubstSeq k : SubstSeq (ksubstbis k) (kseqbis k) (S k).
Proof.
 apply substseq_exists. apply ksubstbis_noerase. apply ksubstbis_prolong.
Qed.

(** Initial values *)

Lemma kwordbis_0 k : kwordbis k 0 = [S k].
Proof.
 reflexivity.
Qed.

Lemma kwordbis_1 k : kwordbis k 1 = [S k; 0].
Proof.
 cbn. unfold ksubstbis.
 case Nat.ltb_spec; auto. lia.
Qed.

Lemma ksubstbis_low0 k n : n <= k -> napply (ksubstbis k) n [0] = [n].
Proof.
 induction n. auto.
 intros LE.
 rewrite napply_alt. rewrite IHn; try lia. simpl.
 unfold ksubstbis. case Nat.ltb_spec; auto. lia.
Qed.

Lemma ksubstbis_low0' k : napply (ksubstbis k) (S k) [0] = [S k; 0].
Proof.
 change (S k) with (1+k) at 1. rewrite napply_add.
 rewrite ksubstbis_low0 by lia. simpl.
 unfold ksubstbis. case Nat.ltb_spec; auto. lia.
Qed.

Lemma kwordbis_low k n : n <= S k -> kwordbis k n = S k :: List.seq 0 n.
Proof.
 induction n.
 - now rewrite kwordbis_0.
 - intros LE.
   rewrite seq_S.
   cbn. unfold ksubstbis at 2. case Nat.ltb_spec; try lia. intros _.
   simpl. rewrite napply_cons.
   rewrite ksubstbis_low0; auto; try lia.
   change (kwordbis k n ++ [n] = S k :: List.seq 0 n ++ [n]).
   rewrite IHn; try lia. auto.
Qed.

(** Alt equation : *)

Lemma kwordbis_alt k n :
  k<n -> kwordbis k (S n) = kwordbis k n ++ kwordbis k (n-k).
Proof.
 induction n.
 - inversion 1.
 - rewrite Nat.lt_succ_r, Nat.lt_eq_cases.
   intros [LT| <-].
   + replace (S n -k) with (S (n-k)) by lia.
     remember (S n) as m eqn:E.
     cbn.
     rewrite app_nil_r.
     unfold ksubstbis at 2. case Nat.ltb_spec; try lia. intros _.
     rewrite napply_cons. f_equal.
     replace m with (m-k+k) by lia.
     rewrite napply_add. rewrite ksubstbis_low0 by lia.
     replace (m-k) with (S (n-k)) by lia.
     simpl. f_equal. unfold ksubstbis.
     do 2 (case Nat.ltb_spec; try lia). auto.
   + clear IHn.
     replace (S k-k) with 1 by lia. rewrite kwordbis_1.
     remember (S k) as m eqn:E.
     unfold kwordbis at 1. simpl. unfold ksubstbis at 2.
     case Nat.ltb_spec; try lia. intros _. simpl.
     rewrite napply_cons. f_equal. subst m. apply ksubstbis_low0'.
Qed.

Lemma kwordbis_len k n : length (kwordbis k n) = A k n.
Proof.
 induction n as [[|n] IH] using lt_wf_ind.
 - now rewrite kwordbis_0.
 - case (Nat.lt_ge_cases k n) as [LT|GE].
   + rewrite kwordbis_alt; auto. rewrite app_length, !IH; try lia.
     simpl; auto.
   + rewrite kwordbis_low by lia. simpl.
     rewrite seq_length. rewrite !A_base; lia.
Qed.

Lemma kseqbis_alt k n m a : n < A k m -> kseqbis k n = nth n (kwordbis k m) a.
Proof.
 intros LE.
 rewrite (kseqbis_SubstSeq k m).
 change (napply _ _ _) with (kwordbis k m).
 rewrite kwordbis_len, take_nth; auto.
Qed.

(** Link between [kseqbis] and Zeckendorf decomposition :
    0 iff rank 0,
    1 iff rank 1,
    ...
    (S k) iff rank > k (or no rank, ie n=0)

    Hence 0 in [kseqbis] whenever the [f k] function is flat.
*)

Definition bounded_rankbis k n := omin (rank k n) (S k).

Lemma kseqbis_bounded_rank k n : kseqbis k n = bounded_rankbis k n.
Proof.
 induction n as [n IH] using lt_wf_ind.
 assert (E := decomp_sum k n).
 assert (D := decomp_delta k n).
 set (l := decomp k n) in *.
 destruct (rev l) as [|a rl] eqn:E'; apply rev_switch in E'.
 - rewrite E' in *. simpl in E. rewrite <- E. easy.
 - assert (A k a <= n < A k (S a)).
   { rewrite <- E, E', sumA_rev.
     split.
     + simpl; lia.
     + apply decomp_max. apply Delta_rev. now rewrite <- E'. }
   rewrite (kseqbis_alt k n (S a) 0) by lia.
   destruct (Nat.le_gt_cases a k) as [LE|LT].
   + rewrite kwordbis_low by lia.
     destruct n as [|n]; try easy.
     change (nth _ _ _) with (nth n (List.seq 0 (S a)) 0).
     rewrite !A_base in H; try lia.
     replace n with a by lia.
     rewrite seq_nth by lia. simpl.
     unfold bounded_rankbis, rank. rewrite decomp_low; simpl; lia.
   + rewrite kwordbis_alt by auto.
     rewrite app_nth2; rewrite kwordbis_len; try lia.
     rewrite <- kseqbis_alt by (simpl in H; lia).
     rewrite IH by (generalize (@A_nz k a); lia).
     unfold bounded_rankbis, rank. fold l; rewrite E'; simpl rev.
     replace (decomp _ _) with (rev rl).
     2:{ symmetry; apply decomp_carac.
         - rewrite E' in D. simpl in D. now apply Delta_app_iff in D.
         - revert E. rewrite E'. simpl. rewrite sumA_app. simpl. lia. }
     destruct (rev rl); simpl; lia.
Qed.

Lemma kseqbis_kseq k n : kseq k n = Nat.min k (kseqbis k n).
Proof.
 rewrite kseq_bounded_rank, kseqbis_bounded_rank.
 unfold bounded_rank, bounded_rankbis.
 destruct rank; simpl; lia.
Qed.

(** Counting letter 0 in [kseq k] leads back to the [f k] fonction. *)

Lemma f_count_0 k n : k<>0 -> count (kseq k) 0 n + f k n = n.
Proof.
 induction n.
 - easy.
 - simpl. intros Hk.
   rewrite kseq_bounded_rank.
   unfold bounded_rank.
   destruct (f_step k n) as [E|E].
   + rewrite E. rewrite flat_rank_0 in E. rewrite E. simpl. lia.
   + rewrite E. rewrite step_rank_nz in E.
     destruct (rank k n) as [[|r]|]; simpl; try easy;
       destruct k; simpl; auto; try lia.
Qed.

(** Similarly, counting all letters above [p] leads to [(f k)^^p],
    the p-iterate of [f k]. *)

Lemma fs_count_above k p n :
  p <= k -> (f k ^^p) n = count_above (kseq k) p n.
Proof.
 intros Hp.
 induction n.
 - simpl. apply fs_k_0.
 - simpl. rewrite kseq_bounded_rank.
   unfold bounded_rank.
   destruct (fs_step k p n) as [E|E].
   + rewrite E. rewrite fs_flat_low_rank in E by lia.
     destruct (rank k n); simpl; try easy.
     red in E. case Nat.leb_spec; lia.
   + rewrite E. rewrite fs_nonflat_high_rank in E by lia.
     destruct (rank k n); simpl in *; case Nat.leb_spec; lia.
Qed.

(** Particular case : p=k *)

Lemma count_above_kseq_k k n :
  count_above (kseq k) k n = count (kseq k) k n.
Proof.
 induction n; simpl; auto.
 rewrite kseq_bounded_rank. unfold bounded_rank.
 destruct (rank k n); simpl in *; case Nat.leb_spec; case Nat.eqb_spec; lia.
Qed.

Lemma fs_count_k k n : (f k ^^k) n = count (kseq k) k n.
Proof.
 rewrite fs_count_above by lia.
 apply count_above_kseq_k.
Qed.


(** Full decomposition of any prefix of kword, then kseq (used in Lim) *)

Definition kwords k (l:list nat) : word := concat (map (kword k) l).

Lemma kwords_singl k n : kwords k [n] = kword k n.
Proof.
 unfold kwords. simpl. now apply app_nil_r.
Qed.

Lemma kwords_app k l l' : kwords k (l++l') = kwords k l ++ kwords k l'.
Proof.
 unfold kwords. now rewrite map_app, concat_app.
Qed.

Lemma kwords_cons k a l : kwords k (a::l) = kword k a ++ kwords k l.
Proof.
 change (a::l) with ([a]++l). now rewrite kwords_app, kwords_singl.
Qed.

Lemma ksubst_kwords k l :
 apply (ksubst k) (kwords k l) = kwords k (map S l).
Proof.
 induction l; simpl; auto.
 now rewrite !kwords_cons, apply_app, IHl, <- kword_S.
Qed.

Lemma decomp_prefix_kword k w n l :
 Prefix w (kword k n) -> l = rev (decomp k (length w)) -> w = kwords k l.
Proof.
 revert w l. induction n as [n IH] using lt_wf_ind.
 intros w l P.
 destruct (Nat.le_gt_cases n (S k)).
 - clear IH. rewrite kword_low in * by trivial.
   destruct (Prefix_cons_inv _ _ _ P) as [->|(w' & E' & P')].
   + simpl. now intros ->.
   + assert (LE := Prefix_len _ _ P'). rewrite seq_length in LE.
     apply Prefix_seq in P'.
     rewrite E'. simpl length. unfold letter in *. set (p := length w') in *.
     rewrite decomp_low by lia.
     replace (S _ -1) with p by lia. intros ->. simpl.
     rewrite kwords_singl, kword_low, <-P' by lia. trivial.
 - assert (P' := P). destruct P' as ([|a u] & E).
   + rewrite app_nil_r in E. rewrite E. rewrite kword_len.
     replace (decomp k (A k n)) with [n].
     2:{ symmetry; apply decomp_carac; try constructor; simpl; auto. }
     intros ->. simpl. now rewrite kwords_singl.
   + assert (LT : length w < A k n).
     { rewrite <- kword_len, <- E, app_length. simpl. lia. }
     clear  E.
     destruct n; [lia|].
     rewrite kword_alt in P by lia.
     apply Prefix_app in P. destruct P as [P|(w' & -> & P)].
     * apply (IH n); auto.
     * rewrite app_length, kword_len in *.
       rewrite Nat.add_comm, decomp_plus_A by (simpl in LT; lia).
       rewrite rev_app_distr. intros ->. rewrite kwords_app.
       simpl. f_equal. now rewrite kwords_singl.
       apply (IH (n-k)); auto. lia.
Qed.

Lemma decomp_prefix_kseq k n :
 take n (kseq k) = kwords k (rev (decomp k n)).
Proof.
 assert (H := invA_spec k n). set (m := invA k n) in *.
 assert (H' : n <= A k (S m)) by lia. clear H. clearbody m.
 apply (decomp_prefix_kword _ _ (S m)).
 - apply Prefix_nth_nat. intros p a. rewrite take_length. intros LT.
   rewrite take_nth by trivial.
   apply kseq_alt; lia.
 - now rewrite take_length.
Qed.

Lemma renorm_kwords k l :
 Delta k l -> kwords k (rev (renorm k l)) = kwords k (rev l).
Proof.
 unfold renorm.
 generalize (Nat.le_refl (length l)). generalize (length l) at 2 3.
 intro n. revert l.
 induction n as [[|n] IH] using lt_wf_ind; intros l Hl D.
 - now destruct l.
 - destruct l as [|i l]; simpl in *; trivial.
   apply Delta_inv in D.
   destruct (renorm_loop k l n) as [|a l'] eqn:E.
   + simpl. rewrite kwords_app.
     rewrite <- (IH n); trivial; try lia. now rewrite E.
   + case Nat.eqb_spec; intros.
     * rewrite IH; try lia.
       2:{ change (length (S a :: l')) with (length (a::l')).
           rewrite <- E. rewrite renorm_loop_length; lia. }
       2:{ apply Delta_S_cons. rewrite <- E.
           apply renorm_loop_delta; trivial. lia. }
       subst a. simpl. rewrite !kwords_app, !kwords_singl.
       rewrite kword_alt by lia.
       replace (i+k-k) with i by lia. rewrite <- app_ass. f_equal.
       rewrite <- (kwords_singl k (i+k)), <- kwords_app.
       change (_++_) with (rev (i+k::l')). rewrite <- E.
       apply IH; trivial; try lia.
     * rewrite <- E. simpl. rewrite !kwords_app. f_equal.
       apply IH; trivial; lia.
Qed.

Lemma prefix_kseq_laxdecomp k n l :
 DeltaRev k l -> sumA k l = n -> take n (kseq k) = kwords k l.
Proof.
 rewrite <- Delta_rev. rewrite <- (rev_involutive l) at 2 3.
 rewrite sumA_rev. intros D E.
 rewrite <- renorm_kwords by trivial.
 rewrite decomp_prefix_kseq. f_equal. f_equal.
 apply decomp_carac. now apply renorm_delta. now rewrite renorm_sum.
Qed.

Lemma count_kseq_decomp k n a :
 count (kseq k) a n =
  listsum (map (fun m => nbocc a (kword k m)) (decomp k n)).
Proof.
 rewrite count_nbocc, decomp_prefix_kseq. unfold kwords.
 rewrite nbocc_concat. now rewrite map_map, map_rev, listsum_rev.
Qed.

(** Occurrences of letters when applying ksubst *)

Lemma nbocc_ksubst k : k<>0 ->
 let s := apply (ksubst k) in
 forall w,
 nbocc 0 (s w) = nbocc k w /\
 nbocc k (s w) = nbocc (k-1) w + nbocc k w /\
 forall p, p<k-1 -> nbocc (S p) (s w) = nbocc p w.
Proof.
 induction w; simpl.
 - repeat split; lia.
 - unfold s in *. simpl. rewrite !nbocc_app.
   destruct IHw as (IHw0 & IHwk & IHw).
   rewrite IHw0, IHwk. repeat split.
   + unfold ksubst. case Nat.eqb_spec; simpl; try lia.
     case Nat.eqb_spec; simpl; try lia.
   + unfold ksubst. case Nat.eqb_spec; try lia.
     * intros ->. cbn -[Nat.eqb]. rewrite Nat.eqb_refl.
       do 2 (case Nat.eqb_spec; try lia).
     * intros N. case Nat.eqb_spec; try lia.
       { intros ->. replace (S (k-1)) with k by lia. simpl.
         rewrite Nat.eqb_refl. lia. }
       { intros N'. cbn -[Nat.eqb]. case Nat.eqb_spec; try lia. }
   + intros p Hp. rewrite nbocc_app. rewrite (IHw p Hp).
     unfold ksubst. case Nat.eqb_spec; try lia.
     * intros ->. cbn -[Nat.eqb].
       do 3 (case Nat.eqb_spec; try lia).
     * intros N. simpl. lia.
Qed.

(* In [napply] of [ksubst], the initial letter doesn't matter much :
   low letters become [k] after some rounds of [ksubst], while
   unexpected letters stay large. *)

Lemma napply_ksubst_shift k p n : p+n <= k \/ k < p ->
 napply (ksubst k) n [p] = [p+n].
Proof.
 revert p.
 induction n; simpl; intros.
 - f_equal. lia.
 - rewrite app_nil_r. unfold ksubst at 2.
   case Nat.eqb_spec; try lia. intros. rewrite IHn. f_equal; lia. lia.
Qed.

Lemma napply_ksubst_is_kword k p n : p <= k -> k <= n+p ->
 napply (ksubst k) n [p] = kword k (n+p-k).
Proof.
 intros. replace n with ((n+p-k)+(k-p)) by lia.
 rewrite napply_add, napply_ksubst_shift by lia.
 unfold kword; f_equal. lia. f_equal; lia.
Qed.

(** We hence have an easy bound on lengths of n-iterates of ksubst on
   single letters. *)

Definition NapplySizeBound s n N :=
  forall a:letter, length (napply s n [a]) <= N.

Lemma Bound_A k n : NapplySizeBound (ksubst k) n (A k n).
Proof.
 unfold NapplySizeBound. intros.
 destruct (Nat.le_gt_cases a k).
 - destruct (Nat.le_gt_cases k (n+a)).
   + rewrite napply_ksubst_is_kword by lia. rewrite kword_len.
     apply A_mono. lia.
   + rewrite napply_ksubst_shift by lia. simpl. apply A_nz.
 - rewrite napply_ksubst_shift by lia. simpl. apply A_nz.
Qed.

(** Counting occurrences of [k] and [0] in [kword] *)

Lemma nbocc_k_kword k n : nbocc k (kword k n) = A k (n-k).
Proof.
 induction n as [n IH] using lt_wf_ind.
 destruct (Nat.le_gt_cases n k).
 - rewrite kword_low by lia. simpl.
   rewrite Nat.eqb_refl, nbocc_notin.
   2:{ rewrite in_seq; lia. }
   now replace (n-k) with 0 by lia.
 - destruct n; try lia.
   rewrite kword_alt, nbocc_app by lia.
   rewrite IH by lia.
   rewrite IH by lia.
   now replace (S n - k) with (S (n-k)) by lia.
Qed.

Lemma nbocc_0_kword k n : k<>0 -> nbocc 0 (kword k (S n)) = A k (n-k).
Proof.
 intros Hk.
 induction n as [n IH] using lt_wf_ind.
 destruct (Nat.le_gt_cases (S n) k).
 - rewrite kword_low by lia. simpl.
   rewrite nbocc_notin by (rewrite in_seq; lia).
   case Nat.eqb_spec; try lia.
   now replace (n-k) with 0 by lia.
 - destruct n; try lia.
   rewrite kword_alt, nbocc_app by lia.
   rewrite IH by lia.
   destruct (Nat.le_gt_cases (S n) k).
   + replace (S n - k) with 0 by lia. replace (n-k) with 0 by lia. simpl.
     case Nat.eqb_spec; try lia.
   + replace (S n - k) with (S (n-k)) by lia.
     rewrite IH by lia. now simpl.
Qed.


(* Special case k=2

 0 -> 1
 1 -> 2
 2 -> 20

 Occurrence matrix :

 001
 100
 011

*)

Lemma nbocc_ksubst2 w :
 let s := apply (ksubst 2) in
 nbocc 0 (s w) = nbocc 2 w /\
 nbocc 1 (s w) = nbocc 0 w /\
 nbocc 2 (s w) = nbocc 1 w + nbocc 2 w.
Proof.
 assert (H:2<>0) by lia.
 destruct (nbocc_ksubst 2 H w) as (H0 & H1 & Hp). repeat split; trivial.
 apply Hp; lia.
Qed.

Definition tripleocc w := (nbocc 0 w, nbocc 1 w, nbocc 2 w).

Definition occurmatrix '(x,y,z) : nat*nat*nat := (z,x,y+z).

Lemma nbocc_ksubst2_bis w :
 tripleocc (apply (ksubst 2) w) = occurmatrix (tripleocc w).
Proof.
 unfold tripleocc.
 now destruct (nbocc_ksubst2 w) as (-> & -> & ->).
Qed.

Lemma len_nbocc_012 w :
  Forall (fun a => a <= 2) w ->
  length w = nbocc 0 w + nbocc 1 w + nbocc 2 w.
Proof.
 intros. rewrite nbocc_total_le with (k:=2); simpl; auto; lia.
Qed.

Lemma len_ksubst2 w :
 length (apply (ksubst 2) w) = length w + nbocc 2 w.
Proof.
 induction w; simpl; auto.
 rewrite app_length, IHw.
 unfold ksubst at 1.
 case Nat.eqb_spec; simpl; lia.
Qed.

(* Special case k=3

 0 -> 1
 1 -> 2
 2 -> 3
 3 -> 30

 Occurrence matrix :

 0001
 1000
 0100
 0011

*)

Lemma nbocc_ksubst3 w :
 let s := apply (ksubst 3) in
 nbocc 0 (s w) = nbocc 3 w /\
 nbocc 1 (s w) = nbocc 0 w /\
 nbocc 2 (s w) = nbocc 1 w /\
 nbocc 3 (s w) = nbocc 2 w + nbocc 3 w.
Proof.
 assert (H:3<>0) by lia.
 destruct (nbocc_ksubst 3 H w) as (H0 & H1 & Hp). repeat split; trivial.
 apply Hp; lia.
 apply Hp; lia.
Qed.

Definition fourocc w := (nbocc 0 w, nbocc 1 w, nbocc 2 w, nbocc 3 w).

Definition occurmatrix4 '(x,y,z,t) : nat*nat*nat*nat := (t,x,y,z+t).

Lemma nbocc_ksubst3_bis w :
 fourocc (apply (ksubst 3) w) = occurmatrix4 (fourocc w).
Proof.
 unfold fourocc.
 now destruct (nbocc_ksubst3 w) as (-> & -> & -> & ->).
Qed.

Lemma len_nbocc_0123 w :
  Forall (fun a => a <= 3) w ->
  length w = nbocc 0 w + nbocc 1 w + nbocc 2 w + nbocc 3 w.
Proof.
 intros. rewrite nbocc_total_le with (k:=3); simpl; auto; lia.
Qed.

Lemma len_ksubst3 w :
 length (apply (ksubst 3) w) = length w + nbocc 3 w.
Proof.
 induction w; simpl; auto.
 rewrite app_length, IHw.
 unfold ksubst at 1.
 case Nat.eqb_spec; simpl; lia.
Qed.

(* From a Prefix of napply of a word to a prefix of napply of a letter *)

Lemma napply_prefix s n u v :
  NoErase s -> v<>[] ->
  Prefix u (napply s n v) ->
  exists w t a,
    Prefix (w++[a]) v /\ u = napply s n w ++ t /\ Prefix t (napply s n [a]).
Proof.
 intros NE. revert u.
 induction v; try easy.
 - intros u _. rewrite napply_cons. intros Pr.
   apply Prefix_app in Pr. destruct Pr as [Pr|(u' & E & Pr)].
   + exists [], u, a. rewrite napply_nil. simpl. split; auto. now exists v.
   + destruct (list_eq_dec Nat.eq_dec v []) as [->|NE'].
     * rewrite napply_nil in Pr. apply Prefix_nil in Pr. subst u'.
       rewrite app_nil_r in E.
       exists [], u, a. rewrite napply_nil.
       repeat split; subst; auto using Prefix_id.
     * destruct (IHv u' NE' Pr) as (w & t & b & Hv & E' & Ht).
       exists (a::w), t, b. repeat split; auto.
       { simpl. now apply Prefix_cons. }
       { now rewrite napply_cons, app_ass, <- E', <- E. }
Qed.

(** Saari's Lemma 4 : decomposition of a prefix of s^n(a),
    leaving alone a final part whose size is below a certain threshold *)

Lemma Saari_lemma4 s a n w G M1 MG : G<>0 -> n<>0 ->
 NapplySizeBound s 1 M1 -> NapplySizeBound s G MG ->
 NoErase s ->
 Prefix w (napply s n [a]) ->
 exists l : list (nat * word), exists z,
  w = concat (map (fun '(ni,ui) => napply s ni ui) l) ++ z
  /\ Forall (fun '(ni,ui) => length ui <= M1 /\ G <= ni < n) l
  /\ DeltaRev 1 (map fst l)
  /\ length z <= MG.
Proof.
 intros HG. revert a w.
 induction n as [n IH] using lt_wf_ind.
 intros a w Hn B1 BG NE Pr.
 destruct (Nat.le_gt_cases n G).
 - exists []. exists w. simpl. repeat split; auto. constructor.
   apply Prefix_len in Pr.
   etransitivity; [apply Pr|]. red in BG.
   rewrite <- (BG a). now apply napply_mono.
 - destruct n as [|n]; try easy.
   simpl in Pr. rewrite app_nil_r in Pr.
   destruct (napply_prefix s n w (s a) NE (NE a) Pr)
     as (w1 & w2 & b & H1 & H2 & H3).
   destruct (IH n (Nat.lt_succ_diag_r n) b w2)
     as (l & z & EQ & F & D & LE); auto; try lia.
   exists ((n,w1)::l), z; repeat split; auto.
   + simpl. now rewrite app_ass, <-EQ.
   + constructor; try split; auto; try lia.
     * rewrite <- (B1 a). simpl. rewrite app_nil_r.
       apply Prefix_len in H1. rewrite app_length in H1. simpl in H1. lia.
     * clear -F. rewrite Forall_forall in *.
       intros (m,u) IN. apply F in IN. lia.
   + simpl. apply DeltaRev_alt. split; auto.
     intros y. rewrite in_map_iff. intros ((m,y') & <- & IN). simpl.
     rewrite Forall_forall in F. apply F in IN. lia.
Qed.

(* Same idea in a simpler version (decompose in letters instead of words).
   Should be enough for ksubst *)

Definition Reachable s a b := exists n, In b (napply s n [a]).

Lemma Reachable_trans s a b c :
  Reachable s a b -> Reachable s b c -> Reachable s a c.
Proof.
 intros (n,Hb) (m,Hc). exists (m+n). rewrite napply_add.
 destruct (in_split _ _ Hb) as (u & v & ->).
 rewrite napply_app, napply_cons, !in_app_iff. intuition.
Qed.

Lemma Saari_lemma4_bis s a n w G MG : G<>0 -> n<>0 ->
 NapplySizeBound s G MG ->
 NoErase s ->
 Prefix w (napply s n [a]) ->
 exists l : list (nat * letter), exists z,
  w = concat (map (fun '(ni,ui) => napply s ni [ui]) l) ++ z
  /\ Forall (fun '(ni,ui) => G <= ni /\ Reachable s a ui) l
  /\ length z <= MG.
Proof.
 intros HG. revert a w.
 induction n as [n IH] using lt_wf_ind.
 intros a w Hn BG NE Pr.
 destruct (Nat.le_gt_cases n G).
 - exists []. exists w. simpl. repeat split; auto.
   apply Prefix_len in Pr.
   etransitivity; [apply Pr|]. red in BG.
   rewrite <- (BG a). now apply napply_mono.
 - destruct n as [|n]; try easy.
   simpl in Pr. rewrite app_nil_r in Pr.
   destruct (napply_prefix s n w (s a) NE (NE a) Pr)
     as (w1 & w2 & b & H1 & H2 & H3).
   destruct (IH n (Nat.lt_succ_diag_r n) b w2)
     as (l & z & EQ & F & LE); auto; try lia. clear IH.
   exists (map (fun u => (n,u)) w1 ++ l), z; repeat split; auto.
   + simpl. rewrite H2, EQ. rewrite <- app_ass. f_equal.
     now rewrite map_app, map_map, napply_concat, concat_app.
   + apply Forall_app; split.
     * rewrite Forall_forall. intros (p,c).
       rewrite in_map_iff. intros (x & [= <- <-] & IN). split. lia.
       exists 1. simpl. rewrite app_nil_r. destruct H1 as (w3 & <-).
       rewrite !in_app_iff; intuition.
     * rewrite Forall_forall in *. intros (p,c) IN.
       destruct (F (p,c) IN). split; trivial. eapply Reachable_trans; eauto.
       exists 1. simpl. rewrite app_nil_r. destruct H1 as (w3 & <-).
       rewrite !in_app_iff; intuition.
Qed.

Lemma Reachable_ksubst k p :
  p <= k -> forall q, Reachable (ksubst k) p q <-> q <= k.
Proof.
 intros Hp q. split.
 - intros (n,H).
   assert (F : Forall (fun a => a <= k) [p]) by repeat (constructor; try lia).
   apply (napply_ksubst_letters _ n) in F.
   rewrite Forall_forall in F. now apply F.
 - intros Hq.
   apply Reachable_trans with k.
   + exists (k-p). rewrite napply_ksubst_shift by lia.
     replace (p+(k-p)) with k; simpl; lia.
   + apply Reachable_trans with 0.
     * exists 1. simpl. unfold ksubst. rewrite Nat.eqb_refl. simpl; intuition.
     * exists q. rewrite napply_ksubst_shift by lia. simpl. lia.
Qed.

Lemma Saari_lemma4_ksubst k n w G : G<>0 -> n<>0 ->
 Prefix w (kword k n) ->
 exists l : list nat, exists z,
  w = concat (map (kword k) l) ++ z
  /\ Forall (Nat.le G) l
  /\ length z <= A k (k+G).
Proof.
 intros HG Hn Pref.
 destruct (Saari_lemma4_bis (ksubst k) k n w (k+G) (A k (k+G))) as
  (l & z & E & F & LE); trivial; try lia.
 - apply Bound_A.
 - apply ksubst_noerase.
 - exists (map (fun '(ni,ui) => ni+ui-k) l); exists z; repeat split; trivial.
   + rewrite E. f_equal. f_equal.
     rewrite map_map. simpl. apply map_ext_in.
     intros (ni,ui) IN.
     rewrite Forall_forall in F. destruct (F _ IN) as (U,V).
     rewrite Reachable_ksubst in V; try lia.
     rewrite napply_ksubst_is_kword; trivial; try lia.
   + rewrite Forall_map.
     rewrite Forall_forall in *. intros (p,c) IN.
     destruct (F _ IN) as (U,V).
     rewrite Reachable_ksubst in V; try lia.
Qed.

Lemma kseq_take k n p : n <= A k p -> take n (kseq k) = firstn n (kword k p).
Proof.
 intros LE.
 apply take_carac.
 - rewrite firstn_length, kword_len. lia.
 - intros m a LT.
   rewrite nth_firstn by lia. symmetry. apply kseq_alt. lia.
Qed.

Lemma count_kseq k n p :
  n <= A k p ->
  count (kseq k) 0 n = nbocc 0 (firstn n (kword k p)).
Proof.
 intros LE.
 rewrite count_nbocc. f_equal. now apply kseq_take.
Qed.

(** Is there a 0 at position n in [kseq k] ?
    If so, there's a k at the previous position. *)

Definition is_k0 k n := (kseq k n =? 0).

Lemma rank_0_pred k n : rank k n = Some 0 -> bounded_rank k (pred n) = k.
Proof.
 unfold rank. destruct (decomp k n) as [|r l] eqn:E; try easy.
 intros [= ->].
 unfold bounded_rank, rank.
 assert (D := decomp_delta k n).
 rewrite E in D.
 rewrite (@decomp_carac k (pred n) l).
 2:{ now apply Delta_inv in D. }
 2:{ now rewrite <- (decomp_sum k n), E. }
 destruct l as [|r' l']; trivial. simpl.
 inversion_clear D. lia.
Qed.

Lemma k0_pred_k k n : kseq k n = 0 -> kseq k (pred n) = k.
Proof.
 rewrite !kseq_bounded_rank.
 unfold bounded_rank at 1, omin.
 destruct (Nat.eq_dec k 0) as [->|Hk].
 - unfold bounded_rank, omin. do 2 destruct rank; lia.
 - destruct rank as [r|] eqn:E; try lia. intros Hr.
   replace r with 0 in * by lia. now apply rank_0_pred.
Qed.

(** Given two consecutive prefixes of [kseq], one of the two is
    a [ksubst] of a smaller prefix. *)

Lemma kseq_take_inv k n : k<>0 ->
  take (n + if is_k0 k n then 1 else 0) (kseq k) =
  apply (ksubst k) (take (f k n) (kseq k)).
Proof.
 intros Hk.
 set (l := rev (decomp k n)).
 set (l' := map pred l).
 assert (D' : DeltaRev k l').
 { unfold l', l. rewrite map_rev, DeltaRev_rev.
   apply Delta_map with (S k). lia. apply decomp_delta. }
 assert (E : sumA k l' = f k n).
 { unfold l', l. rewrite map_rev, sumA_rev. symmetry. apply f_decomp. }
 rewrite (prefix_kseq_laxdecomp k (f k n) l') by trivial.
 rewrite ksubst_kwords; auto.
 apply prefix_kseq_laxdecomp.
 - unfold l', l. rewrite map_map, map_rev, DeltaRev_rev.
   apply Delta_map with (S k). lia. apply decomp_delta.
 - unfold l', l. clear -Hk. rewrite map_map, map_rev, sumA_rev.
   destruct (decomp k n) as [|r l] eqn:E.
   + simpl. rewrite <- (decomp_sum k n), E. simpl.
     unfold is_k0; rewrite kseq_bounded_rank. unfold bounded_rank.
     replace (rank k 0) with (@None nat).
     2:{symmetry. now rewrite rank_none. }
     simpl. case Nat.eqb_spec; lia.
   + unfold is_k0. rewrite kseq_bounded_rank. unfold bounded_rank.
     unfold rank. rewrite E. simpl omin.
     case Nat.eqb_spec; intros.
     * replace r with 0 in * by lia. simpl.
       rewrite map_ext_in with (g:=id), map_id.
       2:{ intros a Ha. unfold id.
           assert (D := decomp_delta k n).
           rewrite E in D. apply Delta_nz' in D; try lia.
           assert (a<>0); try lia. now intros ->. }
       rewrite <- (decomp_sum k n), E. simpl. lia.
     * rewrite map_ext_in with (g:=id), map_id.
       now rewrite <- E, decomp_sum.
       assert (D := decomp_delta k n).
       rewrite E in D. apply Delta_nz in D; try lia.
       intros a Ha. unfold id. assert (a<>0); try lia. now intros ->.
Qed.
